basePath: /
definitions:
  model.CommandInsert:
    properties:
      active:
        description: Active status
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      orgId:
        description: Organization ID
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.CommandUpdate:
    properties:
      active:
        description: Active status
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      orgId:
        description: Organization ID
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.DepartmentInsert:
    properties:
      active:
        description: Active status
        type: boolean
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      orgId:
        description: Organization ID
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.DepartmentUpdate:
    properties:
      active:
        description: Active status
        type: boolean
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.Notification:
    properties:
      caseDetail:
        type: string
      caseId:
        type: string
      caseType:
        type: string
      createdAt:
        type: string
      eventType:
        type: string
      id:
        type: string
      message:
        type: string
      read:
        type: boolean
      recipient:
        type: string
      redirectURL:
        type: string
      sender:
        type: string
    type: object
  model.OutputTokenModel:
    properties:
      accessToken:
        type: string
      tokenType:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.StationInsert:
    properties:
      active:
        description: Active status\
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      orgId:
        description: Organization ID
        type: string
      stnId:
        description: Station ID
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.StationUpdate:
    properties:
      active:
        description: Active status\
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      stnId:
        description: Station ID
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.UserContactInsert:
    properties:
      contactAddr: {}
      contactName:
        type: string
      contactPhone:
        type: string
      orgId:
        type: string
      username:
        type: string
    type: object
  model.UserContactInsertUpdate:
    properties:
      contactAddr: {}
      contactName:
        type: string
      contactPhone:
        type: string
    type: object
  model.UserInputModel:
    properties:
      active:
        type: boolean
      areaId:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      currentLat:
        type: string
      currentLon:
        type: string
      deviceId:
        type: string
      displayName:
        type: string
      email:
        type: string
      fullName:
        type: string
      lastLogin:
        type: string
      orgId:
        type: string
      passwordHash:
        type: string
      phoneNumber:
        type: string
      pushToken:
        type: string
      roleId:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      userId:
        type: string
      username:
        type: string
    type: object
  model.UserSkillInsert:
    properties:
      active:
        type: boolean
      orgId:
        type: string
      skillId:
        type: string
      userName:
        type: string
    type: object
  model.UserSkillUpdate:
    properties:
      active:
        type: boolean
      skillId:
        type: string
    type: object
  model.UserSocialInsert:
    properties:
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      username:
        type: string
    type: object
  model.UserSocialUpdate:
    properties:
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      updatedBy:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@somewhere.com
    name: API Support
    url: http://somewhere.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://somewhere.com/
  title: CMS API
  version: "1.0"
paths:
  /api/v1/auth/add:
    post:
      consumes:
      - application/json
      operationId: Create User
      parameters:
      - description: User to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.UserInputModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.OutputTokenModel'
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - Authentication
  /api/v1/auth/login:
    get:
      consumes:
      - application/json
      operationId: Login User
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: organization
        in: query
        name: organization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.OutputTokenModel'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Authentication
  /api/v1/casesubtypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseSubTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases Sub Type
      tags:
      - Cases
  /api/v1/casetypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases
      tags:
      - Cases
  /api/v1/commands:
    get:
      consumes:
      - application/json
      operationId: Get Commands
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands
      tags:
      - Dispatch
  /api/v1/commands/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Commands
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Commands
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Commands by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands by id
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Commands
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CommandUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Commands
      tags:
      - Dispatch
  /api/v1/commands/add:
    post:
      consumes:
      - application/json
      operationId: Create Commands
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CommandInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Commands
      tags:
      - Dispatch
  /api/v1/departments:
    get:
      consumes:
      - application/json
      operationId: Get Department
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department
      tags:
      - Dispatch
  /api/v1/departments/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Department
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Department by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department by ID
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Department
      tags:
      - Dispatch
  /api/v1/departments/add:
    post:
      consumes:
      - application/json
      operationId: Create Department
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Department
      tags:
      - Dispatch
  /api/v1/forms/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Form
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Form
      tags:
      - Form and Workflow
  /api/v1/notifications/delete/{id}:
    delete:
      description: ลบ Notification ตาม id
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: delete notification by id
      tags:
      - Notifications
  /api/v1/notifications/edit/{id}:
    put:
      consumes:
      - application/json
      description: เเก้ไข Notification
      parameters:
      - description: Partial Notification Input
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: edit notification (partial input)
      tags:
      - Notifications
  /api/v1/notifications/new:
    post:
      consumes:
      - application/json
      description: Create a notification by providing only partial fields. The remaining
        fields (e.g., ID, caseId, createdAt) will be generated automatically.
      parameters:
      - description: 'Partial Notification Input (Do not include: id, caseId, createdAt)'
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create notification (partial input)
      tags:
      - Notifications
  /api/v1/notifications/noti/{id}:
    get:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get notification by ID from database
      tags:
      - Notifications
  /api/v1/notifications/recipient/{username}:
    get:
      parameters:
      - description: Username of the recipient
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get notifications received by username
      tags:
      - Notifications
  /api/v1/notifications/ws:
    get:
      description: Opens a WebSocket connection and listens for a username from the
        client to register for real-time notifications.
      parameters:
      - description: Username used to establish WebSocket connection
        in: query
        name: username
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols (WebSocket Upgrade)
        "400":
          description: Missing or invalid username query parameter
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error or WebSocket upgrade failed
          schema:
            additionalProperties:
              type: string
            type: object
      summary: WebSocket endpoint for real-time notifications by username
      tags:
      - Notifications
  /api/v1/stations:
    get:
      consumes:
      - application/json
      operationId: Get Stations
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations
      tags:
      - Dispatch
  /api/v1/stations/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Stations
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Stations
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Stations  by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations by id
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Stations
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.StationUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Stations
      tags:
      - Dispatch
  /api/v1/stations/add:
    post:
      consumes:
      - application/json
      operationId: Create Stations
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.StationInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Stations
      tags:
      - Dispatch
  /api/v1/users:
    get:
      consumes:
      - application/json
      operationId: Get User
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User
      tags:
      - User
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      operationId: Get User by Id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User by Id
      tags:
      - User
  /api/v1/users/username/{username}:
    get:
      consumes:
      - application/json
      operationId: Get User by username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User by username
      tags:
      - User
  /api/v1/users_with_contacts:
    get:
      consumes:
      - application/json
      operationId: Get User with contacts
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with contacts
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with contacts by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContactInsertUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/add:
    post:
      consumes:
      - application/json
      operationId: Create User with contacts
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContactInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with contacts
      tags:
      - User
  /api/v1/users_with_skills:
    get:
      consumes:
      - application/json
      operationId: Get User with skills
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills
      tags:
      - User
  /api/v1/users_with_skills/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with skill
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with skills by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkillUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with skill
      tags:
      - User
  /api/v1/users_with_skills/add:
    post:
      consumes:
      - application/json
      operationId: Create User with skill
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkillInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with skill
      tags:
      - User
  /api/v1/users_with_socials:
    get:
      consumes:
      - application/json
      operationId: Get User with socials
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with socials
      tags:
      - User
  /api/v1/users_with_socials/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with socials
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with Socials by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with Socials by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with socials
      tags:
      - User
  /api/v1/users_with_socials/add:
    post:
      consumes:
      - application/json
      operationId: Create User with socials
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with socials
      tags:
      - User
  /api/v1/workflows/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Workflow
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Workflow
      tags:
      - Form and Workflow
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
