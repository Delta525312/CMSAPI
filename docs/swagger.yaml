basePath: /
definitions:
  model.CaseCloseInput:
    properties:
      caseStatusCode:
        type: string
      closedDate:
        type: string
      modifiedDate:
        type: string
      resultCode:
        type: string
      resultDetail:
        type: string
      transImg:
        items:
          $ref: '#/definitions/model.Media'
        type: array
      userClose:
        type: string
      userModify:
        type: string
    type: object
  model.CaseDetailData:
    properties:
      approvedStatus:
        type: integer
      caseDetail:
        type: string
      caseId:
        type: string
      caseLat:
        type: string
      caseLocationAddress:
        type: string
      caseLocationDetail:
        type: string
      caseLon:
        type: string
      caseStatusCode:
        type: string
      caseStatusName:
        type: string
      casetypeCode:
        type: string
      casetypeName:
        type: string
      citizenCode:
        type: string
      citizenFullname:
        type: string
      commandCode:
        type: string
      commandName:
        type: string
      createdDate:
        type: string
      departmentName:
        type: string
      destLat:
        type: string
      destLocationAddress:
        type: string
      destLocationDetail:
        type: string
      destLon:
        type: string
      extensionReceive:
        type: string
      id:
        type: integer
      mediaType:
        type: integer
      modifiedDate:
        type: string
      openedDate:
        type: string
      phoneNumber:
        type: string
      policeStationCode:
        type: string
      policeStationName:
        type: string
      priority:
        type: integer
      referCaseId:
        type: string
      responsible:
        type: string
      savedDate:
        type: string
      specialEmergency:
        type: integer
      startedDate:
        type: string
      transImg:
        type: string
      urgentAmount:
        type: string
      userCreate:
        type: string
      userCreateId:
        type: string
      userModify:
        type: string
      vOwner:
        type: integer
      vVin:
        type: string
      ways:
        type: integer
    type: object
  model.CaseForCreate:
    properties:
      actionProCode:
        type: string
      backdated:
        type: integer
      caseCondition:
        type: integer
      caseDetail:
        type: string
      caseDirection:
        type: string
      caseLat:
        type: string
      caseLocationAddress:
        type: string
      caseLocationDetail:
        type: string
      caseLocationType:
        type: string
      caseLon:
        type: string
      casePhoto:
        items:
          $ref: '#/definitions/model.Media'
        type: array
      caseRoute:
        type: string
      caseSla:
        type: integer
      caseStatusCode:
        type: string
      casetypeCode:
        type: string
      citizenCode:
        type: string
      closedDate:
        type: string
      commandCode:
        type: string
      createdDate:
        type: string
      destLat:
        type: string
      destLocationAddress:
        type: string
      destLocationDetail:
        type: string
      destLon:
        type: string
      duration:
        type: integer
      escapeRoute:
        type: string
      extensionReceive:
        type: string
      home:
        type: integer
      mediaCode:
        type: string
      mediaType:
        type: integer
      modifiedDate:
        type: string
      needAmbulance:
        type: integer
      openedDate:
        type: string
      phoneNumber:
        type: string
      phoneNumberHide:
        type: integer
      policeStationCode:
        type: string
      priority:
        type: integer
      referCaseId:
        type: string
      specialEmergency:
        type: integer
      startedDate:
        type: string
      token:
        type: string
      transImg:
        items:
          $ref: '#/definitions/model.Media'
        type: array
      userClose:
        type: string
      userCreate:
        type: string
      userModify:
        type: string
      vOwner:
        type: integer
      vVin:
        type: string
      ways:
        type: integer
    type: object
  model.CaseForUpdate:
    properties:
      actionProCode:
        type: string
      backdated:
        type: integer
      caseCondition:
        type: integer
      caseDetail:
        type: string
      caseDirection:
        type: string
      caseLat:
        type: string
      caseLocationAddress:
        type: string
      caseLocationDetail:
        type: string
      caseLocationType:
        type: string
      caseLon:
        type: string
      casePhoto:
        items:
          $ref: '#/definitions/model.Media'
        type: array
      caseRoute:
        type: string
      caseSla:
        type: integer
      caseStatusCode:
        type: string
      casetypeCode:
        type: string
      citizenCode:
        type: string
      closedDate:
        type: string
      commandCode:
        type: string
      createdDate:
        type: string
      destLat:
        type: string
      destLocationAddress:
        type: string
      destLocationDetail:
        type: string
      destLon:
        type: string
      duration:
        type: integer
      escapeRoute:
        type: string
      extensionReceive:
        type: string
      home:
        type: integer
      mediaCode:
        type: string
      mediaType:
        type: integer
      modifiedDate:
        type: string
      needAmbulance:
        type: integer
      openedDate:
        type: string
      phoneNumber:
        type: string
      phoneNumberHide:
        type: integer
      policeStationCode:
        type: string
      priority:
        type: integer
      referCaseId:
        type: string
      specialEmergency:
        type: integer
      startedDate:
        type: string
      transImg:
        items:
          $ref: '#/definitions/model.Media'
        type: array
      userClose:
        type: string
      userCreate:
        type: string
      userModify:
        type: string
      vOwner:
        type: integer
      vVin:
        type: string
      ways:
        type: integer
    type: object
  model.CaseListData:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OutputCase'
        type: array
      draw:
        type: integer
      error:
        type: string
      recordsFiltered:
        type: integer
      recordsTotal:
        type: integer
    type: object
  model.CaseNoteInput:
    properties:
      caseId:
        type: string
      createdDate:
        type: string
      detail:
        type: string
      modifiedDate:
        type: string
      userCreate:
        type: string
      userModify:
        type: string
    type: object
  model.CaseResponse:
    properties:
      data:
        $ref: '#/definitions/model.CaseDetailData'
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.CaseTransactionCRUDResponse:
    properties:
      caseId:
        type: string
      desc:
        type: string
      id:
        type: integer
      msg:
        type: string
      status:
        type: string
    type: object
  model.CaseTransactionModelInput:
    properties:
      actionCarType:
        type: string
      arriveDate:
        type: string
      arrivedDate:
        type: string
      cancelDate:
        type: string
      caseId:
        type: string
      caseStatusCode:
        type: string
      closeDate:
        type: string
      closedDate:
        type: string
      commandedDate:
        type: string
      createdDate:
        type: string
      createdModify:
        type: string
      duration:
        type: integer
      lat:
        description: Consider float64 if GPS
        type: string
      lon:
        type: string
      modifiedDate:
        type: string
      notiStage:
        type: string
      owner:
        type: string
      receiveDate:
        type: string
      receivedDate:
        type: string
      resultCode:
        type: string
      resultDetail:
        type: string
      suggestRoute:
        type: string
      timeToArrive:
        description: If it’s a string, keep as-is; else change to time.Duration or
          time.Time
        type: string
      token:
        type: string
      updatedAccount:
        type: string
      userArrive:
        type: string
      userClose:
        type: string
      userClosedJob:
        type: string
      userCode:
        type: string
      userCommand:
        type: string
      userModify:
        type: string
      userName:
        type: string
      userReceive:
        type: string
      userSla:
        type: integer
      vehicleCode:
        type: string
      viewed:
        type: integer
    type: object
  model.CaseTransactionUpdateInput:
    properties:
      actionCarType:
        type: string
      arriveDate:
        type: string
      arrivedDate:
        type: string
      cancelDate:
        type: string
      caseId:
        type: string
      caseStatusCode:
        type: string
      closeDate:
        type: string
      closedDate:
        type: string
      commandedDate:
        type: string
      createdDate:
        type: string
      createdModify:
        type: string
      duration:
        type: integer
      lat:
        description: Consider float64 if GPS
        type: string
      lon:
        type: string
      modifiedDate:
        type: string
      notiStage:
        type: string
      owner:
        type: string
      receiveDate:
        type: string
      receivedDate:
        type: string
      resultCode:
        type: string
      resultDetail:
        type: string
      suggestRoute:
        type: string
      timeToArrive:
        description: If it’s a string, keep as-is; else change to time.Duration or
          time.Time
        type: string
      token:
        type: string
      updatedAccount:
        type: string
      userArrive:
        type: string
      userClose:
        type: string
      userClosedJob:
        type: string
      userCode:
        type: string
      userCommand:
        type: string
      userModify:
        type: string
      userName:
        type: string
      userReceive:
        type: string
      userSla:
        type: integer
      vehicleCode:
        type: string
      viewed:
        type: integer
    type: object
  model.CreateCaseResponse:
    properties:
      caseId:
        type: string
      desc:
        type: string
      id:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.DeleteCaseResponse:
    properties:
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.Media:
    properties:
      url:
        type: string
    type: object
  model.Notification:
    properties:
      caseDetail:
        type: string
      caseId:
        type: string
      caseType:
        type: string
      createdAt:
        type: string
      eventType:
        type: string
      id:
        type: string
      message:
        type: string
      read:
        type: boolean
      recipient:
        type: string
      redirectURL:
        type: string
      sender:
        type: string
    type: object
  model.OutputCase:
    properties:
      CasetypeCode:
        type: string
      caseDetail:
        type: string
      caseId:
        type: string
      caseLocationAddress:
        type: string
      caseLocationDetail:
        type: string
      caseStatusCode:
        type: string
      caseStatusName:
        type: string
      casetypeName:
        type: string
      createdDate:
        type: string
      id:
        type: string
      mediaType:
        type: integer
      phoneNumber:
        type: string
      priority:
        type: integer
      specialEmergency:
        type: integer
      stationName:
        type: string
      urgentAmount:
        type: string
      vOwner:
        type: integer
      vVin:
        type: string
    type: object
  model.OutputTokenModel:
    properties:
      accessToken:
        type: string
      tokenType:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.UpdateCaseResponse:
    properties:
      desc:
        type: string
      id:
        type: integer
      msg:
        type: string
      status:
        type: string
    type: object
  model.UserContact:
    properties:
      contactAddr: {}
      contactName:
        type: string
      contactPhone:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      orgId:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      username:
        type: string
    type: object
  model.UserInputModel:
    properties:
      active:
        type: boolean
      areaId:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      currentLat:
        type: string
      currentLon:
        type: string
      deviceId:
        type: string
      displayName:
        type: string
      email:
        type: string
      fullName:
        type: string
      lastLogin:
        type: string
      orgId:
        type: string
      passwordHash:
        type: string
      phoneNumber:
        type: string
      pushToken:
        type: string
      roleId:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      userId:
        type: string
      username:
        type: string
    type: object
  model.UserSkill:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: string
      orgId:
        type: string
      skillId:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      userName:
        type: string
    type: object
  model.UserSocialInsert:
    properties:
      createdBy:
        type: string
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      updatedBy:
        type: string
      username:
        type: string
    type: object
  model.UserSocialUpdate:
    properties:
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      updatedBy:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@somewhere.com
    name: API Support
    url: http://somewhere.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://somewhere.com/
  title: CMS API
  version: "1.0"
paths:
  /api/v1/AuthAPI/add:
    post:
      consumes:
      - application/json
      operationId: Create User
      parameters:
      - description: User to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.UserInputModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.OutputTokenModel'
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - Authentication
  /api/v1/AuthAPI/login:
    get:
      consumes:
      - application/json
      operationId: Login User
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: organization
        in: query
        name: organization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.OutputTokenModel'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Authentication
  /api/v1/AuthAPI/token:
    get:
      consumes:
      - application/json
      operationId: Login
      parameters:
      - description: grantType
        in: query
        name: grantType
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: scope
        in: query
        name: scope
        type: string
      - description: clientId
        in: query
        name: clientId
        type: string
      - description: clientSecret
        in: query
        name: clientSecret
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.OutputTokenModel'
      security:
      - ApiKeyAuth: []
      summary: Get Token
      tags:
      - Authentication
  /api/v1/cases:
    get:
      consumes:
      - application/json
      operationId: ListCases
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      - description: keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: List Cases
      tags:
      - Cases
    post:
      consumes:
      - application/json
      operationId: Create a new case
      parameters:
      - description: Case data to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.CaseForCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CreateCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new case
      tags:
      - Cases
  /api/v1/cases/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete an existing case
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.DeleteCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing case
      tags:
      - Cases
    get:
      consumes:
      - application/json
      operationId: Get a specify case by record ID
      parameters:
      - default: 0
        description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a specify case by record ID
      tags:
      - Cases
    patch:
      consumes:
      - application/json
      operationId: Update an existing case
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Case data to be update
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.CaseForUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.UpdateCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing case
      tags:
      - Cases
  /api/v1/cases/close/{id}:
    patch:
      consumes:
      - application/json
      operationId: Update an existing case status (close or cancel)
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Case data to be update
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.CaseCloseInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.UpdateCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing case status (close or cancel)
      tags:
      - Cases
  /api/v1/cases/detail/{id}:
    get:
      consumes:
      - application/json
      operationId: Get a specify case by case code (case_id)
      parameters:
      - description: case code
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a specify case by case code (case_id)
      tags:
      - Cases
  /api/v1/cases/search:
    get:
      consumes:
      - application/json
      operationId: SearchCase
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      - description: keyword
        in: query
        name: keyword
        type: string
      - default: '"-1"'
        description: case_status_code
        in: query
        name: css
        type: string
      - description: case_id
        in: query
        name: cid
        type: string
      - description: case_detail
        in: query
        name: cdl
        type: string
      - description: command_code
        in: query
        name: cmc
        type: string
      - description: station_code
        in: query
        name: stc
        type: string
      - description: opened_date (date start)
        in: query
        name: fdt
        type: string
      - description: date_to (date end)
        in: query
        name: tdt
        type: string
      - description: user_create
        in: query
        name: uce
        type: string
      - description: casetype_code
        in: query
        name: ctc
        type: string
      - default: '"5-DESC"'
        description: order_by
        in: query
        name: odb
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: Search Case
      tags:
      - Cases
  /api/v1/casesubtypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseSubTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases Sub Type
      tags:
      - Case Sub Types
  /api/v1/casetypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseTypes
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases
      tags:
      - Case Types
  /api/v1/commands:
    get:
      consumes:
      - application/json
      operationId: Get Commands
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands
      tags:
      - Commands
  /api/v1/commands/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Commands by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands by id
      tags:
      - Commands
  /api/v1/departments:
    get:
      consumes:
      - application/json
      operationId: Get Department
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department
      tags:
      - Department
  /api/v1/departments/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Department by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department by ID
      tags:
      - Department
  /api/v1/forms/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Form
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Form
      tags:
      - Form
  /api/v1/notes:
    post:
      consumes:
      - application/json
      operationId: Create transaction Note
      parameters:
      - description: Case data to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.CaseNoteInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: Create transaction Note
      tags:
      - Transaction
  /api/v1/notes/{id}:
    get:
      consumes:
      - application/json
      operationId: ListTransactionNote
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: List Transaction Note
      tags:
      - Transaction
  /api/v1/notifications/delete/{id}:
    delete:
      description: ลบ Notification ตาม id
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: delete notification by id
      tags:
      - Notifications
  /api/v1/notifications/edit/{id}:
    put:
      consumes:
      - application/json
      description: เเก้ไข Notification
      parameters:
      - description: Partial Notification Input
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: edit notification (partial input)
      tags:
      - Notifications
  /api/v1/notifications/new:
    post:
      consumes:
      - application/json
      description: Create a notification by providing only partial fields. The remaining
        fields (e.g., ID, caseId, createdAt) will be generated automatically.
      parameters:
      - description: 'Partial Notification Input (Do not include: id, caseId, createdAt)'
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create notification (partial input)
      tags:
      - Notifications
  /api/v1/notifications/noti/{id}:
    get:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get notification by ID from database
      tags:
      - Notifications
  /api/v1/notifications/recipient/{username}:
    get:
      parameters:
      - description: Username of the recipient
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get notifications received by username
      tags:
      - Notifications
  /api/v1/notifications/ws:
    get:
      description: Opens a WebSocket connection and listens for a username from the
        client to register for real-time notifications.
      parameters:
      - description: Username used to establish WebSocket connection
        in: query
        name: username
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols (WebSocket Upgrade)
        "400":
          description: Missing or invalid username query parameter
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error or WebSocket upgrade failed
          schema:
            additionalProperties:
              type: string
            type: object
      summary: WebSocket endpoint for real-time notifications by username
      tags:
      - Notifications
  /api/v1/stations:
    get:
      consumes:
      - application/json
      operationId: Get Stations
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations
      tags:
      - Stations
  /api/v1/stations/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Stations  by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations by id
      tags:
      - Stations
  /api/v1/trans:
    get:
      consumes:
      - application/json
      operationId: ListTransaction
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      - description: keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: List Transaction
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      operationId: Create transaction
      parameters:
      - description: Case data to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.CaseTransactionModelInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseTransactionCRUDResponse'
      security:
      - ApiKeyAuth: []
      summary: Create transaction
      tags:
      - Transaction
  /api/v1/trans/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete an existing transaction
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.DeleteCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing transaction
      tags:
      - Transaction
    get:
      consumes:
      - application/json
      operationId: Get a specify transaction by record ID or case code (caseId)
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CaseListData'
      security:
      - ApiKeyAuth: []
      summary: Get a specify transaction by record ID or case code (caseId)
      tags:
      - Transaction
    patch:
      consumes:
      - application/json
      operationId: Update an existing transaction
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseTransactionUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.CreateCaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing transaction
      tags:
      - Transaction
  /api/v1/users:
    get:
      consumes:
      - application/json
      operationId: Get User
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User
      tags:
      - User
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      operationId: Get User by Id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User by Id
      tags:
      - User
  /api/v1/users_with_contacts:
    get:
      consumes:
      - application/json
      operationId: Get User with contacts
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with contacts
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with contacts by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContact'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/add:
    post:
      consumes:
      - application/json
      operationId: Create User with contacts
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContact'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with contacts
      tags:
      - User
  /api/v1/users_with_skills:
    get:
      consumes:
      - application/json
      operationId: Get User with skills
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills
      tags:
      - User
  /api/v1/users_with_skills/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with skill
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with skills by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkill'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with skill
      tags:
      - User
  /api/v1/users_with_skills/add:
    post:
      consumes:
      - application/json
      operationId: Create User with skill
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkill'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with skill
      tags:
      - User
  /api/v1/users_with_socials:
    get:
      consumes:
      - application/json
      operationId: Get User with socials
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with socials
      tags:
      - User
  /api/v1/users_with_socials/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with socials
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with Socials by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with Socials by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with socials
      tags:
      - User
  /api/v1/users_with_socials/add:
    post:
      consumes:
      - application/json
      operationId: Create User with socials
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with socials
      tags:
      - User
  /api/v1/workflows/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Workflow
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Workflow
      tags:
      - Workflow
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
