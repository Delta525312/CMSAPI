basePath: /
definitions:
  model.CaseInsert:
    properties:
      arrivedDate:
        type: string
      caseDetail:
        type: string
      caseDuration:
        type: integer
      caseLat:
        type: string
      caseLon:
        type: string
      caseSTypeId:
        type: string
      caseTypeId:
        type: string
      caseVersion:
        type: string
      caselocAddr:
        type: string
      caselocAddrDecs:
        type: string
      closedDate:
        type: string
      commandedDate:
        type: string
      countryId:
        type: string
      createdDate:
        type: string
      deviceId:
        type: string
      distId:
        type: string
      extReceive:
        type: string
      phoneNo:
        type: string
      phoneNoHide:
        type: boolean
      priority:
        type: integer
      provId:
        type: string
      receivedDate:
        type: string
      referCaseId:
        type: string
      resDetail:
        type: string
      resId:
        type: string
      source:
        type: string
      startedDate:
        type: string
      statusId:
        type: string
      userarrive:
        type: string
      userclose:
        type: string
      usercommand:
        type: string
      usercreate:
        type: string
      userreceive:
        type: string
    type: object
  model.CaseSubTypeInsert:
    properties:
      active:
        type: boolean
      caseSla:
        type: string
      en:
        type: string
      priority:
        type: string
      sTypeCode:
        type: string
      th:
        type: string
      typeId:
        type: string
      unitPropLists:
        items:
          type: string
        type: array
      userSkillList:
        items:
          type: string
        type: array
      wfId:
        type: string
    type: object
  model.CaseSubTypeUpdate:
    properties:
      active:
        type: boolean
      caseSla:
        type: string
      en:
        type: string
      priority:
        type: string
      sTypeCode:
        type: string
      th:
        type: string
      unitPropLists:
        items:
          type: string
        type: array
      userSkillList:
        items:
          type: string
        type: array
      wfId:
        type: string
    type: object
  model.CaseTypeInsert:
    properties:
      active:
        type: boolean
      en:
        type: string
      th:
        type: string
    type: object
  model.CaseTypeUpdate:
    properties:
      active:
        type: boolean
      en:
        type: string
      th:
        type: string
    type: object
  model.CaseUpdate:
    properties:
      arrivedDate:
        type: string
      caseDetail:
        type: string
      caseDuration:
        type: integer
      caseLat:
        type: string
      caseLon:
        type: string
      caseSTypeId:
        type: string
      caseTypeId:
        type: string
      caseVersion:
        type: string
      caselocAddr:
        type: string
      caselocAddrDecs:
        type: string
      closedDate:
        type: string
      commandedDate:
        type: string
      countryId:
        type: string
      createdDate:
        type: string
      deviceId:
        type: string
      distId:
        type: string
      extReceive:
        type: string
      phoneNo:
        type: string
      phoneNoHide:
        type: boolean
      priority:
        type: integer
      provId:
        type: string
      receivedDate:
        type: string
      referCaseId:
        type: string
      resDetail:
        type: string
      resId:
        type: string
      source:
        type: string
      startedDate:
        type: string
      statusId:
        type: string
      userarrive:
        type: string
      userclose:
        type: string
      usercommand:
        type: string
      usercreate:
        type: string
      userreceive:
        type: string
    type: object
  model.CommandInsert:
    properties:
      active:
        description: Active status
        type: boolean
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.CommandUpdate:
    properties:
      active:
        description: Active status
        type: boolean
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.Data:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  model.DepartmentInsert:
    properties:
      active:
        description: Active status
        type: boolean
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.DepartmentUpdate:
    properties:
      active:
        description: Active status
        type: boolean
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.FormActive:
    properties:
      active:
        type: boolean
      formId:
        type: string
    type: object
  model.FormInsert:
    properties:
      active:
        type: boolean
      formColSpan:
        type: integer
      formFieldJson:
        items:
          additionalProperties: true
          type: object
        type: array
      formName:
        type: string
      locks:
        type: boolean
      publish:
        type: boolean
    type: object
  model.FormLock:
    properties:
      formId:
        type: string
      locks:
        type: boolean
    type: object
  model.FormPublish:
    properties:
      formId:
        type: string
      publish:
        type: boolean
    type: object
  model.FormUpdate:
    properties:
      active:
        type: boolean
      formColSpan:
        type: integer
      formFieldJson:
        items:
          additionalProperties: true
          type: object
        type: array
      formName:
        type: string
      locks:
        type: boolean
      publish:
        type: boolean
    type: object
  model.FormsManager:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: string
      formColSpan:
        type: integer
      formFieldJson:
        items:
          additionalProperties: true
          type: object
        type: array
      formId:
        type: string
      formName:
        type: string
      locks:
        type: boolean
      publish:
        type: boolean
      updatedAt:
        type: string
      updatedBy:
        type: string
      versions:
        type: string
    type: object
  model.Login:
    properties:
      organization:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.Notification:
    properties:
      createdAt:
        type: string
      createdBy:
        description: เพิ่มใหม่
        type: string
      data:
        items:
          $ref: '#/definitions/model.Data'
        type: array
      eventType:
        type: string
      expiredAt:
        description: เพิ่มใหม่
        type: string
      id:
        type: integer
      message:
        type: string
      orgId:
        type: string
      recipients:
        description: ใช้ตอนสร้างเท่านั้น
        items:
          $ref: '#/definitions/model.Recipient'
        type: array
      redirectUrl:
        type: string
      sender:
        type: string
      senderPhoto:
        description: เพิ่มใหม่
        type: string
      senderType:
        description: '"SYSTEM" or "USER"'
        type: string
    type: object
  model.PermissionInsert:
    properties:
      active:
        type: boolean
      groupName:
        type: string
      permName:
        type: string
    type: object
  model.PermissionUpdate:
    properties:
      active:
        type: boolean
      groupName:
        type: string
      permName:
        type: string
    type: object
  model.Recipient:
    properties:
      type:
        type: string
      value:
        type: string
    type: object
  model.RefreshInput:
    properties:
      refreshToken:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.ResponseDataFormList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.FormsManager'
        type: array
      desc:
        type: string
      msg:
        type: string
      status:
        type: string
    type: object
  model.RoleInsert:
    properties:
      active:
        type: boolean
      roleName:
        type: string
    type: object
  model.RolePermissionBody:
    properties:
      active:
        type: boolean
      permId:
        type: string
    type: object
  model.RolePermissionInsert:
    properties:
      permId:
        items:
          $ref: '#/definitions/model.RolePermissionBody'
        type: array
      roleId:
        type: string
    type: object
  model.RolePermissionUpdate:
    properties:
      permId:
        items:
          $ref: '#/definitions/model.RolePermissionBody'
        type: array
    type: object
  model.RoleUpdate:
    properties:
      active:
        type: boolean
      roleName:
        type: string
    type: object
  model.SkillInsert:
    properties:
      active:
        type: boolean
      en:
        type: string
      th:
        type: string
    type: object
  model.SkillUpdate:
    properties:
      active:
        type: boolean
      en:
        type: string
      th:
        type: string
    type: object
  model.StationInsert:
    properties:
      active:
        description: Active status\
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.StationUpdate:
    properties:
      active:
        description: Active status\
        type: boolean
      commId:
        description: Community ID
        type: string
      deptId:
        description: Department ID
        type: string
      en:
        description: English name
        type: string
      th:
        description: Thai name
        type: string
    type: object
  model.UserAdminInput:
    properties:
      activationToken:
        type: string
      active:
        type: boolean
      address:
        description: Assumes JSON column
        type: string
      blood:
        type: string
      bod:
        type: string
      citizenId:
        type: string
      commId:
        type: string
      deptId:
        type: string
      displayName:
        type: string
      email:
        type: string
      empId:
        type: string
      firstName:
        type: string
      gender:
        type: integer
      islogin:
        type: boolean
      lastActivationRequest:
        type: integer
      lastLogin:
        type: string
      lastName:
        type: string
      lostPasswordRequest:
        type: integer
      middleName:
        type: string
      mobileNo:
        type: string
      orgId:
        type: string
      password:
        type: string
      photo:
        type: string
      roleId:
        type: string
      signupStamp:
        type: integer
      stnId:
        type: string
      title:
        type: string
      userType:
        type: integer
      username:
        type: string
    type: object
  model.UserContactInsert:
    properties:
      contactAddr: {}
      contactName:
        type: string
      contactPhone:
        type: string
      orgId:
        type: string
      username:
        type: string
    type: object
  model.UserContactInsertUpdate:
    properties:
      contactAddr: {}
      contactName:
        type: string
      contactPhone:
        type: string
    type: object
  model.UserInput:
    properties:
      active:
        type: boolean
      address:
        type: string
      blood:
        type: string
      bod:
        type: string
      citizenId:
        type: string
      commId:
        type: string
      deptId:
        type: string
      displayName:
        type: string
      email:
        type: string
      empId:
        type: string
      firstName:
        type: string
      gender:
        type: integer
      islogin:
        type: boolean
      lastActivationRequest:
        type: integer
      lastLogin:
        type: string
      lastName:
        type: string
      lostPasswordRequest:
        type: integer
      middleName:
        type: string
      mobileNo:
        type: string
      password:
        type: string
      photo:
        type: string
      roleId:
        type: string
      signupStamp:
        type: integer
      stnId:
        type: string
      title:
        type: string
      userType:
        type: integer
      username:
        type: string
    type: object
  model.UserSkillInsert:
    properties:
      active:
        type: boolean
      orgId:
        type: string
      skillId:
        type: string
      userName:
        type: string
    type: object
  model.UserSkillUpdate:
    properties:
      active:
        type: boolean
      skillId:
        type: string
    type: object
  model.UserSocialInsert:
    properties:
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      username:
        type: string
    type: object
  model.UserSocialUpdate:
    properties:
      orgId:
        type: string
      socialId:
        type: string
      socialName:
        type: string
      socialType:
        type: string
      updatedBy:
        type: string
      username:
        type: string
    type: object
  model.UserUpdate:
    properties:
      active:
        type: boolean
      address:
        type: string
      blood:
        type: string
      bod:
        type: string
      citizenId:
        type: string
      commId:
        type: string
      deptId:
        type: string
      displayName:
        type: string
      email:
        type: string
      empId:
        type: string
      firstName:
        type: string
      gender:
        type: integer
      islogin:
        type: boolean
      lastActivationRequest:
        type: integer
      lastLogin:
        type: string
      lastName:
        type: string
      lostPasswordRequest:
        type: integer
      middleName:
        type: string
      mobileNo:
        type: string
      password:
        type: string
      photo:
        type: string
      roleId:
        type: string
      signupStamp:
        type: integer
      stnId:
        type: string
      title:
        type: string
      userType:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@somewhere.com
    name: API Support
    url: http://somewhere.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://somewhere.com/
  title: CMS API
  version: "1.0"
paths:
  /api/v1/auth/add:
    post:
      consumes:
      - application/json
      operationId: Create User Auth
      parameters:
      - description: User to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.UserAdminInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User Auth
      tags:
      - Authentication
  /api/v1/auth/login:
    get:
      consumes:
      - application/json
      operationId: Login User
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: organization
        in: query
        name: organization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Authentication
    post:
      consumes:
      - application/json
      operationId: Login User Post
      parameters:
      - description: Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Login User Post
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      operationId: Refresh Token
      parameters:
      - description: Body
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.RefreshInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh Token
      tags:
      - Authentication
  /api/v1/case:
    get:
      consumes:
      - application/json
      operationId: ListCase
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases
      tags:
      - Cases
  /api/v1/case/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Case
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Case
      tags:
      - Cases
    get:
      consumes:
      - application/json
      operationId: Case By Id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Cases By Id
      tags:
      - Cases
    patch:
      consumes:
      - application/json
      operationId: Update Case
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Case
      tags:
      - Cases
  /api/v1/case/add:
    post:
      consumes:
      - application/json
      operationId: Create Case
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Case
      tags:
      - Cases
  /api/v1/casesubtypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseSubTypes
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List CasesSubType
      tags:
      - Cases
  /api/v1/casesubtypes/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete CaseSubType
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete CaseSubType
      tags:
      - Cases
    patch:
      consumes:
      - application/json
      operationId: Update CaseSubType
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseSubTypeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update CaseSubType
      tags:
      - Cases
  /api/v1/casesubtypes/add:
    post:
      consumes:
      - application/json
      operationId: Create CaseSubType
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseSubTypeInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create CaseSubType
      tags:
      - Cases
  /api/v1/casetypes:
    get:
      consumes:
      - application/json
      operationId: ListCaseTypes
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: List Cases
      tags:
      - Cases
  /api/v1/casetypes/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete CaseType
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete CaseType
      tags:
      - Cases
    patch:
      consumes:
      - application/json
      operationId: Update CaseType
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseTypeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update CaseType
      tags:
      - Cases
  /api/v1/casetypes/add:
    post:
      consumes:
      - application/json
      operationId: Create CaseType
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CaseTypeInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create CaseType
      tags:
      - Cases
  /api/v1/commands:
    get:
      consumes:
      - application/json
      operationId: Get Commands
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands
      tags:
      - Dispatch
  /api/v1/commands/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Commands
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Commands
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Commands by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Commands by id
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Commands
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CommandUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Commands
      tags:
      - Dispatch
  /api/v1/commands/add:
    post:
      consumes:
      - application/json
      operationId: Create Commands
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CommandInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Commands
      tags:
      - Dispatch
  /api/v1/departments:
    get:
      consumes:
      - application/json
      operationId: Get Department
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department
      tags:
      - Dispatch
  /api/v1/departments/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Department
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Department by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Department by ID
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Department
      tags:
      - Dispatch
  /api/v1/departments/add:
    post:
      consumes:
      - application/json
      operationId: Create Department
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.DepartmentInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Department
      tags:
      - Dispatch
  /api/v1/forms:
    get:
      consumes:
      - application/json
      operationId: Get Form
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      - description: version
        in: query
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Form
      tags:
      - Form and Workflow
    post:
      consumes:
      - application/json
      operationId: Create Form
      parameters:
      - description: Created Data
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.FormInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Form
      tags:
      - Form and Workflow
  /api/v1/forms/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Form
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Form
      tags:
      - Form and Workflow
  /api/v1/forms/{uuid}:
    patch:
      consumes:
      - application/json
      operationId: Update Form
      parameters:
      - description: uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Update Data
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.FormUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Form
      tags:
      - Form and Workflow
  /api/v1/forms/active:
    patch:
      consumes:
      - application/json
      operationId: Update Form Status
      parameters:
      - description: Update Data
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.FormActive'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Form Status
      tags:
      - Form and Workflow
  /api/v1/forms/getAllForms:
    get:
      consumes:
      - application/json
      operationId: Get All Form
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseDataFormList'
      security:
      - ApiKeyAuth: []
      summary: Get All Form
      tags:
      - Form and Workflow
  /api/v1/forms/lock:
    patch:
      consumes:
      - application/json
      operationId: Update Form Lock
      parameters:
      - description: Update Data
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.FormLock'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Form Lock
      tags:
      - Form and Workflow
  /api/v1/forms/publish:
    patch:
      consumes:
      - application/json
      operationId: Update Form Publish
      parameters:
      - description: Update Data
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.FormPublish'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Form Publish
      tags:
      - Form and Workflow
  /api/v1/notifications:
    post:
      consumes:
      - application/json
      description: Creates a batch of notifications, saves them to the database in
        a single transaction, and broadcasts each one to relevant online users. The
        input should be a JSON array of notification objects.
      parameters:
      - description: A JSON array of notification objects. The `data` field should
          be an array of key-value objects, e.g., `\
        in: body
        name: notifications
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Notification'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Notifications created successfully
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error (e.g., database transaction failure)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create one or more new notifications
      tags:
      - Notifications
  /api/v1/notifications/{id}:
    delete:
      description: Deletes a notification by its ID.
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Message confirming deletion
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a notification
      tags:
      - Notifications
    put:
      consumes:
      - application/json
      description: Updates the content of a specific notification by its ID.
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      - description: Notification object with fields to update.
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: Notification updated successfully
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Invalid request body or ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update an existing notification
      tags:
      - Notifications
  /api/v1/notifications/{orgId}/{username}:
    get:
      description: Retrieves all notifications intended for a user by their username
        and organization ID.
      parameters:
      - description: Organization ID of the user
        in: path
        name: orgId
        required: true
        type: string
      - description: Username to fetch notifications for
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all notifications for a specific user
      tags:
      - Notifications
  /api/v1/notifications/register:
    get:
      description: Establishes a WebSocket connection. The client must send a JSON
        message with `orgId` and `username` to register the session.
      responses:
        "101":
          description: Switching Protocols
        "400":
          description: Bad Request (invalid registration message)
        "404":
          description: Not Found (User not found)
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: WebSocket endpoint for real-time notifications
      tags:
      - Notifications
  /api/v1/permission:
    get:
      consumes:
      - application/json
      operationId: Get Permission
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Permission
      tags:
      - Permission
  /api/v1/permission/{permId}:
    delete:
      consumes:
      - application/json
      operationId: Delete Permission
      parameters:
      - description: permId
        in: path
        name: permId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Permission
      tags:
      - Permission
    get:
      consumes:
      - application/json
      operationId: Get Permission by id
      parameters:
      - description: permId
        in: path
        name: permId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Permission by id
      tags:
      - Permission
    patch:
      consumes:
      - application/json
      operationId: Update Permission
      parameters:
      - description: permId
        in: path
        name: permId
        required: true
        type: string
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.PermissionUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Permission
      tags:
      - Permission
  /api/v1/permission/add:
    post:
      consumes:
      - application/json
      operationId: Create Permission
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.PermissionInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Permission
      tags:
      - Permission
  /api/v1/role:
    get:
      consumes:
      - application/json
      operationId: Get Role
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Role
      tags:
      - Role
  /api/v1/role/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Role
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Role
      tags:
      - Role
    get:
      consumes:
      - application/json
      operationId: Get Role by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Role by ID
      tags:
      - Role
    patch:
      consumes:
      - application/json
      operationId: Update Role
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.RoleUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Role
      tags:
      - Role
  /api/v1/role/add:
    post:
      consumes:
      - application/json
      operationId: Create Role
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.RoleInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Role
      tags:
      - Role
  /api/v1/role_permission:
    get:
      consumes:
      - application/json
      operationId: Get RolePermission
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get RolePermission
      tags:
      - Role
  /api/v1/role_permission/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete RolePermission
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete RolePermission
      tags:
      - Role
    get:
      consumes:
      - application/json
      operationId: Get RolePermission by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get RolePermission by ID
      tags:
      - Role
  /api/v1/role_permission/{roleId}:
    patch:
      consumes:
      - application/json
      operationId: Update RolePermission
      parameters:
      - description: roleId
        in: path
        name: roleId
        required: true
        type: string
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.RolePermissionUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update RolePermission
      tags:
      - Role
  /api/v1/role_permission/add:
    post:
      consumes:
      - application/json
      operationId: Create RolePermission
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.RolePermissionInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create RolePermission
      tags:
      - Role
  /api/v1/skill:
    get:
      consumes:
      - application/json
      operationId: Get Skill
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Skill
      tags:
      - User
  /api/v1/skill/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Skill
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get Skill by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Skill by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update Skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.SkillUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Skill
      tags:
      - User
  /api/v1/skill/add:
    post:
      consumes:
      - application/json
      operationId: Create Skill
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.SkillInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Skill
      tags:
      - User
  /api/v1/stations:
    get:
      consumes:
      - application/json
      operationId: Get Stations
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations
      tags:
      - Dispatch
  /api/v1/stations/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete Stations
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Stations
      tags:
      - Dispatch
    get:
      consumes:
      - application/json
      operationId: Get Stations  by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Stations by id
      tags:
      - Dispatch
    patch:
      consumes:
      - application/json
      operationId: Update Stations
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.StationUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Stations
      tags:
      - Dispatch
  /api/v1/stations/add:
    post:
      consumes:
      - application/json
      operationId: Create Stations
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.StationInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Stations
      tags:
      - Dispatch
  /api/v1/users:
    get:
      consumes:
      - application/json
      operationId: Get User
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User
      tags:
      - User
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User by Id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User by Id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Data Update
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - User
  /api/v1/users/add:
    post:
      consumes:
      - application/json
      operationId: Create User
      parameters:
      - description: User to be created
        in: body
        name: Case
        required: true
        schema:
          $ref: '#/definitions/model.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - User
  /api/v1/users/username/{username}:
    get:
      consumes:
      - application/json
      operationId: Get User by username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User by username
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User By Username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: Data Update
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User By Username
      tags:
      - User
  /api/v1/users_with_contacts:
    get:
      consumes:
      - application/json
      operationId: Get User with contacts
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with contacts
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with contacts by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with contacts by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with contacts
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContactInsertUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with contacts
      tags:
      - User
  /api/v1/users_with_contacts/add:
    post:
      consumes:
      - application/json
      operationId: Create User with contacts
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserContactInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with contacts
      tags:
      - User
  /api/v1/users_with_skills:
    get:
      consumes:
      - application/json
      operationId: Get User with skills
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills
      tags:
      - User
  /api/v1/users_with_skills/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with skill
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with skills by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with skill
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkillUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with skill
      tags:
      - User
  /api/v1/users_with_skills/add:
    post:
      consumes:
      - application/json
      operationId: Create User with skill
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSkillInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with skill
      tags:
      - User
  /api/v1/users_with_skills/skillId/{skillId}:
    get:
      consumes:
      - application/json
      operationId: Get User with skills by skillId
      parameters:
      - description: skillId
        in: path
        name: skillId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with skills by skill id
      tags:
      - User
  /api/v1/users_with_socials:
    get:
      consumes:
      - application/json
      operationId: Get User with socials
      parameters:
      - default: 0
        description: start
        in: query
        name: start
        type: integer
      - default: 10
        description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with socials
      tags:
      - User
  /api/v1/users_with_socials/{id}:
    delete:
      consumes:
      - application/json
      operationId: Delete User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete User with socials
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: Get User with Socials by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User with Socials by id
      tags:
      - User
    patch:
      consumes:
      - application/json
      operationId: Update User with socials
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User with socials
      tags:
      - User
  /api/v1/users_with_socials/add:
    post:
      consumes:
      - application/json
      operationId: Create User with socials
      parameters:
      - description: Create Data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UserSocialInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Create User with socials
      tags:
      - User
  /api/v1/workflows:
    get:
      consumes:
      - application/json
      operationId: Get Workflow List
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Workflow List
      tags:
      - Form and Workflow
  /api/v1/workflows/{id}:
    get:
      consumes:
      - application/json
      operationId: Get Workflow
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - Request successful
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Workflow
      tags:
      - Form and Workflow
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
